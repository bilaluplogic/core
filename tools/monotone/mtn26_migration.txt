CHECKLIST FOR MTN .26 migration

We need to migrate from monotone version .25 to monotone .26. The
changes in mt.26 are of such nature that this needs to be coordinated
centrally, since the revision history will be reconstructed into
another storage format in monotone internally.

This means that the 'conversion' needs to be done on one database and
on one database only, after which people have to redownload the db.

This document aims to construct a checklist for the activities
involved and put them in prioritized order.

Basic procedure for migrating a *central* database:

mt.26 -d your.db db migrate
mt.26 -d your.db db rosterify
mt.26 -d your.db db check

The above readies a db to .26 format.


DATABASES pre-flight testing

  core.db
     migrate:   YES
     rosterify: YES
     size:      OLD: 170M NEW: 115M
     branches:  YES (how many?)
     time:      roughly 1 hour
  modules.db
     migrate:   YES
     rosterify: YES (got 1 bad signature warning, but process completed successfully)
     size:      OLD: 315M NEW: 256M
     branches:  ?
     time:      estimated 2 hours
  themes.db
     migrate:   YES
     rosterify: YES
     size:      OLD: 5.3M NEW: 4.1M
     branches:  ?
     time:      estimated 20 mins
  languages.db
     migrate:   YES
     rosterify  YES
     size:      OLD: 38M NEW: 30M
     branches:  ?
     time:      estimated 30 mins
  artwork.db
     migrate:
     rosterify:
     size:
     branches:  ?
     times:

**Estimated downtime**: at least 5 hours.


PRIORITIZED CHECKLIST

* complete the plan
* write a notification to xar.devel explaining what the plan is and a rough timeline
  focus on the private branches!! (see below: PRIVATE BRANCHES)
* back up the mt.25 databases
* remove the nightly downloads from web view (mt.xaraya.com)
* stop cron jobs
  - on davinci: generating the initial download
  - on newton: all monotone related
  - other?
* change the lua scripts in /etc/monotone
  - cia notifications  (Q: use the nonce hooks? A: yes, but post-flight)
  - nntp notifications (Q: use the nonce hooks? A: yes, but post-fligh)
* if applicable recompile monotone on mt.xaraya.com
* db migrate on all databases on mt.xaraya.com
* db rosterify on all databases on mt.xaraya.com
* db check all databases, resolve all errors/warnings
* rename all databases *.db -> *.mtn (recommended naming)
* change server setup to reflect mt.26 changes:
  - adjust rc script on server
  - change default port to 4691 (core database)
  - double check aliases and symlinks (executable name changed from monotone to mtn)
* start mt.26 serving but do not allow traffic yet
* upgrade viewmtn to support mt.26 (upstream is ready), reincorporate our changes
* rewrite and start cron jobs on mt.xaraya.com
  - check that the initial dbs are generated ok
  - check that the nightlies are generated ok by the (rewritten) cron job
* enable the (nightly) downloads again
* CHECKPOINT: distributed revisions might start getting created again *POINT OF NO RETURN*
* Adapt xaraya.rc, if needed.
* Incrementally adjust working directories while in-flight:
  - .mt-ignore -> .mtn-ignore (should be automatic)
  - remove .mt-attrs files



PRIVATE BRANCHES
Rosterifying private branches can be problematic, as
revisions found in the private database will conflict with revisions
in the main database. The procedure below can be used to work around
these problems without any data loss.

Make sure you make a backup of your database before attempting any of these steps.

STEPS TO PERFORM FOR PRIVATE BRANCHES

1. If your db contains both the com.xaraya.* branches and your private
branches, create a new database and ONLY pull your private branches
into it, so all your private branches are in that db.
2. Rosterify your PRIVATE database.
   $ mtn db migrate --db private.mtn
   $ mtn db rosterify --db private.mtn
3. Make sure the rosterify went ok and double-check the revisions in
   your private database and the main database making sure they have
   the same revision IDs (you only have to check the latest version).
3. Next get a list of all the revisions in the MAIN database and
   delete the certificates for those revisions from your PRIVATE database.
   $ for RID in `mtn automate select i: --db main.mtn`; do
        mtn --db private.mtn db execute "DELETE FROM revision_certs  WHERE id = '$RID'";
     done

     Now your private database contains a rosterified version of your
     private branches with no conflicting rosterified certs.
4. Fix the epochs for your private branches. To do this, get the
   epochs from the main database and set them in the private database.
   $ mtn --db main.mtn ls epochs
   $ mtn --db private.mtn db set_epoch com.xaraya.core <main.mtn epoch>
   (repeat for each overlapping branch)
5. Pull the main db into your private db.


To merge into the above somewhere:
- check .mt -> mtn replacement
- test some working copies
- check the pagesize sqlite setting centrally
- how do we deal with people who 'missed' the process, i.e. they come
with mt.25 changes, or patches, after the fact? (A: probably rosterify
locally as if it were private?, ask in #monotone?)
- make inventory of working directories on newton/einstein/davinci and document
  the steps to take to move them into .26 land.
  newton:
    - MLS working dirs
    - auto dirs for producing downloads/documentation etc.
    - all live sites run from monotone
  einstein:
    - none that i know of
  davinci:
    - client area for producing nightly areas
        * can just be cleaned and reinitialized
    - test area
        * forget about this, manual reconstruction
    - viewmtn area:
        * resource from upstream
        * re-apply css changes
        * add new css changes for new views in newer viewmtn

SCRIPTS
  misc or all
   change called executable to mtn
   change referenced workspace directories to _MTN
   remove .mt-attr files (modify any hooks that check for it)

   change firewall/port redirection to reference port 4691


Q&A
---
Q: are any of the fixes since .26 release important to us?
A: no

Q: do we want to use usher?
A: no

Q: pull and checkout scripts?
A: no such thing centrally, people who have em, should convert themselves

Q: active branches to reduce?
A: none, it doesnt matter

Q: if we plan right after 1.1. release that typically means people start
downloading and support goes up a notch in the 2-3 weeks after that,
unavoidably leading to some patches which need to be put in. How do we
deal with that, since we will be in the midst of the mt.26 transition
and loading another burden on top of the extra patch activity?

TIMELINE
--------
* after 1.1 release
* at a time at least 3 people can commit a day at the same time
* the notification should be at least 1 week in advance
* guestimate of the whole process: 2 weeks minimum, assume project
freeze during it worst case.

Concept notification message to .devel list
-------------------------------------------
For those of you that are using monotone locally, we have scheduled a monotone migration to version .26. What is written below is IMPORTANT for you if you use monotone, so please read it carefully.

Since migrating to this version involves a complete rebuild of the database, this affects developers who have databases which contain revisions pulled from our mt.xaraya.com database. For people who have branches in their database(s) outside the com.xaraya.* hierarchy the story is somewhat more complex.

The databases on our server need to be migrated to the new format and everyone needs to grab a new copy of the database, either by pulling into their own new mt.26 db or downloading the initial db we have been putting up for download (preferred).

We have planned this migration on:

 Saturday MAY 20 and Sunday MAY 21 <TIME SLOT?>

During this time the monotone service on our server will be down, meaning you cannot pull, push or view revisions via mt.xaraya.com.

I've divided the users of the Xaraya monotone databases in a number of groups and will describe what you need to do / be aware of on a group by group basis.

The groups:

Group 0: "EVERYONE"
    Everyone.

Group 1: "READERS"
  People using monotone just to pull our repositories, i.e. you do a mt pull / mt update but nothing more than that. You have a db for xaraya and no other work is stored in the database.

Group 2: "WRITERS"
  All activities as in Group 1, but you also commit work, i.e. you have executed mt commit in your db, i.e. you have branches we have, but you have revisions we don't have.

Group 3: "PUBLISHERS"
  All activities as in Group 2, but you've also send your commits out to somewhere, be it our server, your own, or anyone elses, i.e. you have executed mt push at some point.

Group 4: "CUSTOMIZERS"
  Activities as in Group 2, but you also have created 'branches' based on any of the com.xaraya.* branches and named them otherwise. These are so called 'private branches', i.e. you have branches we dont have, and that contain revisions we both have.

Actions:

"EVERYONE"
----------
Possibly redundant, if you value your data, you'd make a backup of everything created when setting up your monotone environment.
After the migration is complete, you can upgrade your monotone executable to the .26 version.

"READERS"
---------
After the migration is complete, people in this group grab a new copy of the database and throw away the old one. Database wise, that is the only thing to do.
For each of your working copies, you have to adapt the 'meta info' of your working copy. This means adapting the information in each working copy, so monotone knows it's from a .26 db. This can be done in a number of ways, which are well documented by the monotone people.

See also 'references' below for links to background information.

"WRITERS"
---------
Activities as described under READERS do apply for WRITERS too.
Since your database (we call it PRIVATE db) may contain revisions we don not have, you have to migrate your own db yourself. For this you have to follow the steps under "PRIVATE BRANCHES".

See also 'references' below for links to background information.

"PUBLISHERS"
------------
Activities as described under WRITERS do apply for PUBLISHERS too.
If you have pushed your revisions to somewhere else, you'll have to manage those destinations similar to what we're describing to you here now. This means you have to inform your users that a migration is going to occur (which can be separate from our migration) informing them what to do.
You also have to follow the setup under PRIVATE BRANCHES.

See also 'references' below for links to background information.

"CUSTOMIZERS"
-------------
Activities as described under WRITERS do apply for CUSTOMIZERS too.
The only difference with WRITERS is that your branches have names (and presumably revisions) we do not have in our database. The procedure to follow is as outlined in PRIVATE BRANCHES


PRIVATE BRANCHES
----------------
Rosterifying private branches can be problematic, as
revisions found in the private database will conflict with revisions
in the main database. The procedure below can be used to work around
these problems without any data loss.
We call the Xaraya db *after* migration: MAIN.db
We call your db PRIVATE.db

Make sure you make a backup of your database before attempting any of these steps.

1. Rosterify your PRIVATE.db database.
   Roughly:
     $ mtn db migrate --db PRIVATE.db
     $ mtn db rosterify --db PRIVATE.db
2. Make sure the rosterify went ok and double-check the revisions in
   your PRIVATE.db database and the MAIN.db database making sure they have
   the same revision IDs (you only have to check the latest version).
3. Next get a list of all the revisions in the MAIN.db database and
   delete the certificates for those revisions from your PRIVATE.db database.
   $ for RID in `mtn automate select i: --db MAIN.db`; do
        mtn --db PRIVATE.db db execute "DELETE FROM revision_certs WHERE id = '$RID'";
     done

     Now your PRIVATE.db database contains a rosterified version of your
     PRIVATE.db branches with no conflicting rosterified certs.
4. Fix the epochs for your private branches. To do this, get the
   epochs from the main database and set them in the private database.
   $ mtn --db MAIN.db ls epochs
   $ mtn --db PRIVATE.db db set_epoch com.xaraya.core [main epoch]
   (repeat for each overlapping branch)
5. Pull the main db revisions into your private db.

If you have further questions or need assistance:
  post here, mailto:marcel@xaraya.com or catch MrB on IRC

marcel

references
[1] http://venge.net/monotone/wiki/RosterifyingPrivateBranches
[2] http://venge.net/monotone/UPGRADE
[3] http://venge.net/monotone/NEWS

____
Notes MichelV:
Epoch = ?

