Blocklayout version 2
=====================

Other places of information:
    * http://wiki.xaraya.com/index.php?title=Blocklayout_Version_2
    * RFC-0054

Concept change:
---------------

Instead of grabbing each character in the input and parsing out the templates we implement a 'pass through, unless' type XSL transformation. This
means that each tag we want to do something special to the output has one or
more XSL templates which match it in context and transform the input to the 
desired output. The specifics of the transformation are determined by context
and the value signature of the attributes. This whole process is XML based, from beginning to (just before) the end. All rules XML implies, apply to this process too.
    


Issues
------

- [DONE] how to cross the border? i.e. how do parameters from the module 
  get passed into the xslt processor (see parameter section below and 
  xsltransformer.php )
- how do we create a suiteable test suite (make a compilation of the core
  templates?) [STARTED in theme XClassic
  modules/base/user-main-compilertest.xt]
- can we make a stub inserting some random values for the template vars,
  so we can compare somehow
- is merging with other output namespaces just a question of copying
  output (xhtml in our case)
- how do we handle #$var# constructs?
  * ideally i want to handle it through separation of the template in two
    sections, data and presentation, both in the xml domain:
  * one way of doing that is to make #$var# ~ &var; but this is a pain to
    handle for XSLT, since it assumes entities to be known/declared at
    transform time, which is clearly not the case
  * another separation mechanism is to create a "data" section (xml
    fragment) to go with the template: like
    <tpldata>
      <vars>
        <var name="var">value</var>
          ...
      </vars>
    </tpldata>

    or something like that, generated dynamically, From then on we can
    reach each var by using XPath expressions like

      /tpldata/vars/var[@name='varname']

    which sounds sort of attractive because it is almost exactly like the
    array stuff, but then XML compliant. It also means that we would need 
    to translate each and every template to this syntax.
- the xarBLCompiler.php does some processing here and there, which of
  these need to stay in php, which of them can be done by xsl? We can take
  them on a case by case basis, since php functions can be called
  reasonably easy from within the transform, but each case is a weakness
  in portability so we try to avoid it.
- it really doesnt make sense anymore now to go through the hoops of
  registering custom tags etc. One xsl snippet for a custom tag,
  generating the right code is a lot easier. Note: this would also
  invalidate the whole GUI where tags are shown on screen and can be
  manually entered into the database, which is of questionable use anyway,
  apart from a debugging perspective.
- go over all xar: tags attributes and decide how resolving should be
  handled, dont add a resolvement unless you have a usecase.
- our # delimiter conflicts with the use of generic entities in rare
  cases.

  Example 1:
    #$modinfo['adminurltitle']#&#160;#$modinfo['displayname']#
     |_______first expr______| ^ |__| |_________text________|\- lonely #
                               |   \- second expr
                               |- single & 'text'
  Example 2:
    ##$variable##
    
    Could be: [empty expression][text: $variable][empty expression]  OR
              [text: #][content of $variable][text: #] 
    depending on how it's looked upon.ok
- the construct <div style="clear: left|right|both"><div> appears to render improperly.
- javascript construct:
    <script type="text/javascript">Calendar.setup({#$js_options#});</script>
  (from the dhtml calendar at dynarch.com) appears to render improperly.