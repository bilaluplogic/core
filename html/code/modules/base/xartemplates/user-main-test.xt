<?xml version="1.0" encoding="utf-8"?>
<xar:template xmlns:xar="http://xaraya.com/2004/blocklayout">
    <!-- License: GPL http://www.gnu.org/copyleft/gpl.html -->
    <xar:template file="user-mod-head"/>
    <div class="xar-mod-body">
        <p>
            This template <strong>modules/base/xartemplates/user-main<em>-test</em>.xt</strong> can be reached by adding <strong><a href="#xarServer::getModuleURL('base','user','main',array('page' => 'test'))#">page=<em>test</em></a></strong> to the base module URL.
            You can experiment with various blocklayout features and template tags here if you want...
        </p>

        <h3>XML to SQL Proof of Concept</h3>
        
        <h4>First create the roles object</h4>
<pre>
&lt;xar:set name="dummy">1;
    sys::import('modules.dynamicdata.class.objects.master');
    $roles = DataObjectMaster::getObjectList(array('name'=>'roles_users'));
&lt;/xar:set>
</pre>

        <!-- Here we create the object -->
        <xar:set name="dummy">1;
            sys::import('modules.dynamicdata.class.objects.master');
            $roles = DataObjectMaster::getObjectList(array('name'=>'roles_users'));
            $roles->dataquery->eq('uname','admin');
        </xar:set>


        <h4>1. A simple example</h4>
<pre>
&lt;xar:data-getitems properties="$properties" values="$items" object="$roles">
</pre>
        <xar:data-getitems properties="$properties" values="$items" object="$roles">
        <!--
            Add SELECT with WHERE clauses here
        -->
        </xar:data-getitems>
        
        <table>
            <xar:foreach in="$items" key="$key" value="$value">
                <tr><td>#$key#</td><td>#$value['uname']#</td><td>#$value['name']#</td></tr>
            </xar:foreach>
        </table>
        
        <h4>2. Same example using a xar:select tag</h4>
<pre>
&lt;xar:data-getitems object="$roles" properties="$properties" values="$items" tplmodule="dynamicdata">
  &lt;xar:select>
    &lt;xar:andconditions>
      &lt;xar:condition operator="eq" property="uname">'admin'&lt;/xar:condition>
    &lt;/xar:andconditions>
  &lt;/xar:select>
&lt;/xar:data-getitems>
</pre>
        <!-- Here we create the object -->
        <xar:set name="dummy">1;
            sys::import('modules.dynamicdata.class.objects.master');
            $roles = DataObjectMaster::getObjectList(array('name'=>'roles_users'));
        </xar:set>
        
        <!-- Here we create the object -->
        <xar:data-getitems object="$roles" properties="$properties" values="$items" tplmodule="dynamicdata">
          <xar:select>
            <xar:andconditions>
              <xar:condition operator="eq" property="uname">'admin'</xar:condition>
            </xar:andconditions>
          </xar:select>
        </xar:data-getitems>

        <xar:set name="foo">$roles->dataquery->qecho()</xar:set>

        <xar:data-view object="$roles" tplmodule="dynamicdata" fieldlist="id,uname,name,email,state"/>

        <hr/><h4>3. The xar:select tag</h4>
        <h4>3.1. Markup</h4>
<pre>
&lt;xar:select objectname="modules" items="$items" name="myquery">
    &lt;xar:orconditions>
        &lt;xar:andconditions>
        &lt;xar:condition operator="eq" property="regid">8&lt;/xar:condition>
            &lt;xar:orconditions>
                &lt;xar:andconditions>
                    &lt;xar:orconditions>
                        &lt;xar:condition operator="eq" property="name">'base'&lt;/xar:condition>
                        &lt;xar:condition operator="eq" property="name">'roles'&lt;/xar:condition>
                    &lt;/xar:orconditions>
                    &lt;xar:condition operator="gt" property="id">1&lt;/xar:condition>
                    &lt;xar:condition operator="lt" property="id">5&lt;/xar:condition>
                &lt;/xar:andconditions>
                &lt;xar:condition operator="ne" property="regid">27&lt;/xar:condition>
            &lt;/xar:orconditions>
        &lt;/xar:andconditions>
        &lt;xar:condition operator="in" property="regid">array(2,3,4,5,6,7,8,9,10)&lt;/xar:condition>
        &lt;xar:condition operator="like" property="name">'themes'&lt;/xar:condition>
    &lt;/xar:orconditions>
&lt;/xar:select>
</pre>
        <xar:select objectname="modules" items="$items" name="myquery">
            <xar:orconditions>
                <xar:andconditions>
                <xar:condition operator="eq" property="regid">8</xar:condition>
                    <xar:orconditions>
                        <xar:andconditions>
                            <xar:orconditions>
                                <xar:condition operator="eq" property="name">'base'</xar:condition>
                                <xar:condition operator="eq" property="name">'roles'</xar:condition>
                            </xar:orconditions>
                            <xar:condition operator="gt" property="id">1</xar:condition>
                            <xar:condition operator="lt" property="id">5</xar:condition>
                        </xar:andconditions>
                        <xar:condition operator="ne" property="regid">27</xar:condition>
                    </xar:orconditions>
                </xar:andconditions>
                <xar:condition operator="in" property="regid">array(2,3,4,5,6,7,8,9,10)</xar:condition>
                <xar:condition operator="like" property="name">'themes'</xar:condition>
            </xar:orconditions>
        </xar:select>
        <br /><br />
        <h4>3.2. Resulting query string</h4>
        <xar:set name="foo">$myquery->qecho()</xar:set>
        <br /><br />
        <h4>3.3. Result of running the query</h4>
        <xar:set name="foo">var_dump($items)</xar:set>
    
    </div>

<!-- Define the fields we are using -->
<!-- input fields -->
a: <input name="a"/>
b: <input name="b"/>

<!-- output field -->
c: <input name="c"/>

<!-- trigger fields -->
<xar:set name="options">
    array(
    array('id' => 1, 'name' =>1),
    array('id' => 2, 'name' =>2),
    )
</xar:set>
d: <xar:data-input type="dropdown" name="d" options="$options"/>
e: <xar:data-input type="textbox" name="e"/>
    
<script type="text/javascript" src="http://localhost:8888/bermuda/html/code/modules/jquery/xartemplates/includes/jquery-1.4.2.js"></script>
<script type="text/javascript" src="http://localhost:8888/bermuda/html/code/modules/jquery/xartemplates/includes/jquery.field.js"></script>
<script type="text/javascript" src="http://localhost:8888/bermuda/html/code/modules/jquery/xartemplates/includes/jquery.calculation.js"></script>

<script type="text/javascript">
  $(document).ready(
  function (){
    // update the plug-in version
    $("##idPluginVersion").text($.Calculation.version);
function recalc(){$("[name^=c]").calc("net + tax",{net: $("input[name^=a]"),tax: $("input[name^=b]"),});}recalc();$("input[name^=a]").bind("keyup", recalc);$("input[name^=b]").bind("keyup", recalc);$("input[name^=d]").bind("change", recalc);$("input[name^=e]").bind("change", recalc);
    }
  );
</script>

    
    <!-- the calculation is a + b -> c -->
    <xar:calculation>
        <xar:calc formula="net + tax" select="name" target="c">
            <xar:calcvar name="net" select="name" field="a"/>
            <xar:calcvar name="tax" select="name" field="b"/>
            
            <!-- the calculation is triggered by a keyup event in field a or b -->
            <xar:calcbinding event="keyup" select="name" field="a"/>
            <xar:calcbinding event="keyup" select="name" field="b"/>
            
            <!-- the calculation does not work with field d -->
            <xar:calcbinding event="change" select="name" field="d"/>
            <!-- it works with a change event in a textbox  -->
            <xar:calcbinding event="change" select="name" field="e"/>
        </xar:calc>
    </xar:calculation>
</xar:template>
