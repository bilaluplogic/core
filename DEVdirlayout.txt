Framework directory layout (outwebroot scenario)
------------------------------------------------

Having literally everything below the webroot is limiting deployment choices.
Below are some thoughts on how we could organize the files and directories in 
a way where things which do not need to be below the webroot, can be placed 
outside of it. 

/root
    /html                                 [anything which needs to be accessible by the web front goes here]
        .htaccess                         [or equivalent for other http server]
        index.php                         [entry point]
        ws.php                            [do we need this?, assuming we have a 'Controller' class somehow]
        /themes                           [probably right in this place, maybe more like skin (presentation) than theme (structure)]
            ...
        /modules                          [problematic, should be able to be moved out, but most, if not all modules depend on the webroot]
            ...
    /core                                 [this places core outside lib, which means we view it as an application (not entirely right i think)]
        bootstrap.php                     [this file probably needs a fixed location as the one reference we base other stuff on]
        ...(?)
    /lib                                  [contains libraries which are in use]
        /xaraya                           [we are a lib too? (mainly to get a classpath entry and be consistent with the other entries.)]
            ... (?)
        /blocklayout                      [this makes more sense than 'xaraya' in the previous line, if we make it a self contained lib]
            ...(blocklayout files)
        /creole
            ...(creole files)
        /zend                             [ironically Zend is the only one in these examples which would need adaptation to fit in :-)]
            ...(zend framework)           
        /propel
            ...(propel)
        /PEAR (?)                         [probably needs some glue, PEAR assumes it will be top level controlling to some extent]
            ...
        etc...
    /var                                  [contains generated files like logs, caches etc.]
        /cache                            [top level for caches]
            /database
            /templates                    [there's probably a need for separate configuration of these]
            /output
            ...
        /locales                          [top level for locale related information]
        /log                              [top level for logs]
        /modules                          [top level for filebased module data]
            /roles
                /messaging
            /workflow
                /processes
            ...
    /etc                                  [contains static information regarding to configuration of components]
        default.conf
        site1.conf?                       [per site/app config? i'd rather not but for totally unrelated sites it migh be comfy (i.e. creating a new default site)]
        app2.conf?                        
        /modules                          [top level for module specific configuration files]
            /workflow
                galaxia.conf
            ...
            
Issues/Questions/Todo:
    - how do we deal with themes and modules? themes typically want to have 
    access to webroot accessible stuff like styles and images, modules too, but they 
    shouldn't :-) i have a tendency to place modules outside the webroot, 
    but that may be really uncomfortable.
    - how do we define module data which is file based? (in terms of what is 
    data and how, for example does it relate to things inside xardata like 
    directories) Self contained modules are quite comfortable.
    - where do client libraries like js frameworks go?
    - why are locales needed on fs? 
    - how much webserver specific configuration like aliases etc. would we 
    need for this
    - describe in detail why this is better than all below webroot.
    - do we want (parts of) in lib or have (core) as the main 'Application' 
    (pro/con?)
    - if there is such a thing needed as cgi-bin, where does it go in this 
    picture? if at all
    - this assume a one tree deployment, what if we want to repeat this for some
    reason. Should we take an 'order' into account, i.e. first look in the site 
    tree, then look in the global tree? (cfr. trac organisation)
    - we probably want an easy-access taglib location, so it's easy to create 
    custom tag definitions (where would that go?)
    - how often can the include_path on servers *not* be changed?
    - using absolute paths based on a config seems the safest. just as we base 
    everything on the current (==webroot) directory now.
    - there have been numerous requests for providing a very easy place to put
    snippets (php snippets i guess then). How, if at all, do we want to cater for those?
    - how does multisite affect the above in the doc_root piece? (1 or many? both?)
    - what impact does  1 codebase multisite/multiapp on this layout? (db or storage is following 
    the application config, so multi-db is less of an issue in this area)
    - what is a good way to assess the magnitude of work on this? That it is a lot we know, but a metric would be nice.
    - somehow modules seem painful in this layout, 'too big' comes to mind, 'too loose' too. 
    Meant in the way that modules do so much in our system, it's hard to give them a proper place.
    - where would we put framework wide shared stuff (the equiv of /usr/share/some_app/ in unices) things like a 
    standardized iconset (which themes can override obviously) Stuff like that.
    - concerns heard in the trenches:
        - where do i put my custom content, isnt that going to be scattered all over?
        - this will scare more users away as it becomes more complex.
