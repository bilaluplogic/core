A log of important changes made to the 2.x branch which we need to
revisit later on before trusting the branch to be released or used.

DB-CHANGES:

- module_uservars is now module_itemvars where item is an item in a
  module, not only roles. The columns are adapted accordingly.
- hooks table now registers the mod id in the columns smodid and
  tmodid instead of the name of the module.
- adminpanels as module is completely gone, which also means its table
  was deleted. The complete functionality of adminpanels is now in the
  modules module.
- template_tags column xar_module replaced by a column xar_modid
- security_instances column xar_module replaced by column xar_modid
- security_masks column xar_module replaced by column xar_modid
- xar_roles column xar_auth_module replaced by column
  xar_auth_modid. The interface WAS NOT ADAPTED but nothing uses the
  auth_module directly and the columns is probably going to move away
  to somewhere else anyway. 
- xar_block_types column xar_module replaced by column xar_modid. This
  was far out the most intrusive one since that table is used in the
  privilege instance queries. I adapted as best as I could, no doubt
  they wont work anymore in some cases. We'll see.

OTHER CHANGES POSSIBLY AFFECTING UPGRADES:
- when encountered, upgrade code to upgrade modules from older
versions than in 1.0 are removed, assuming we will only support
upgrading from 1.0 to 2.x and not versions before 1.0
- the whole exception subsystem was rewritten from scratch and the
  whole of core was adapted to use it. (see new RFC-0054)
- adodb has been replaced with the creole database abstraction layer.
-

REFACTORING LIST:
List of things which need to be refactored before starting the actual
design work can begin.

* i really like some sort of import(name.of.some.sub.part) dot notation to
  include major parts into the flow when doing stuff, instead of
  xarInclude or something
* Finish up the planned db changes to normalizing the database.
* OO-ify stuff in core where appropriate (including getting rid of
  die()'s and modelling the classes where php4 could not) 
* I really would like to do something with views wrt multisites et. al.
* I really would like to do something with triggers, dunno for what
* I really would like to do something with stored procedures, dunno for what
* removing xslt from installer, php5 does that different
* blocks do not end up in group anymore, need to investigate
* put labels on controls in installer
* simplify xaradmin.php before rewriting it

VIEWS support for backends:
- mysql   : yes, since 5.0
- sqlite  : yes, since forever
- postgres: yes, since 7.3 (at least)
- mssql   : yes, no idea version wise

MIN. REQUIRED VERSIONS DETERMINED SO FAR
* PHP      5.0.5
* Mysql    5.0.18
* Postgres 8.0.6
* Sqlite   N/A (embedded in PHP)
* MsSql server 2003?


